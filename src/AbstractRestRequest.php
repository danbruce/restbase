<?php

namespace DanBruce\RestBase;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Response;

/**
 * An abstract class for make HTTP requests with Guzzle through object
 * composition.
 * Subclass this class and implement the required methods.
 */
abstract class AbstractRestRequest
{
    /**
     * Some HTTP verb constants
     */
    const HTTP_VERB_GET = 'get';
    const HTTP_VERB_DELETE = 'delete';
    const HTTP_VERB_HEAD = 'head';
    const HTTP_VERB_OPTIONS = 'options';
    const HTTP_VERB_PATCH = 'patch';
    const HTTP_VERB_POST = 'post';
    const HTTP_VERB_PUT = 'put';

    // the actual client instance
    private $client;
    // a default set of client options
    private static $defaultClientOptions = [];

    /**
     * Returns the HTTP verb to be used in the request.
     * @return string The HTTP verb to be used in the request.
     */
    abstract protected function getHttpVerb();

    /**
     * Returns the URL to hit for the request.
     * @return string The URL to hit for the request.
     */
    abstract protected function getUrl();

    /**
     * Returns the array of options to use in the request.
     * @return array Returns an array of options to be handed to Guzzle in the
     *         request.
     */
    abstract protected function getOptions();

    /**
     * Returns a configured instance of the underlying Guzzle client.
     * @return \GuzzleHttp\Client The underlying client.
     */
    public function getClient()
    {
        if (!isset($this->client)) {
            $this->client = new Client($this->getClientOptions());
        }
        return $this->client;
    }

    /**
     * Sets a Guzzle client to be used.
     * @param \GuzzleHttp\Client $client The client to use.
     * @return \DanBruce\RestBase\AbstractRestRequest Returns $this.
     */
    public function setClient(Client $client)
    {
        $this->client = $client;
        return $this;
    }

    /**
     * Returns the default set of options to pass to the client.
     * @return array The default set of client options.
     */
    protected function getClientOptions()
    {
        return self::$defaultClientOptions;
    }

    /**
     * Makes the actual request using the underlying client.
     * @param callable|null $onSuccess (optional) The callback to invoke on a
     *        successful request. If no callback is provided, the method will
     *        fall back to "$this->onSuccess".
     * @param callable|null $onFailure (optional) The callback to invoke on an
     *        unsuccessful request. If no callback is provided, the method will
     *        fall back to "$this->onFailure".
     * @return mixed Returns whatever is returned from the invoked callback.
     */
    public function makeRequest($onSuccess = null, $onFailure = null)
    {
        $onSuccess = $this->getCallback($onSuccess, 'onSuccess');
        $onFailure = $this->getCallback($onFailure, 'onFailure');
        $verb = $this->getHttpVerb();
        try {
            $response = $this->doRequest(
                $verb,
                $this->getUrl(),
                $this->getOptions()
            );
            return call_user_func($onSuccess, $response);
        } catch (RequestException $e) {
            return call_user_func($onFailure, $e);
        }
    }

    /**
     * The default callback invoked after a successful request. The response
     * is assumed to be in the JSON format and is automatically converted.
     * @param \GuzzleHttp\Psr7\Response The response received from the request.
     * @return mixed Returns the decoded JSON response.
     */
    protected function onSuccess(Response $response)
    {
        return json_decode((string)$response->getBody());
    }

    /**
     * The default callback invoved after a failed request. The provided
     * exception is simply thrown up the stack.
     * @param \GuzzleHttp\RequestException The exception generated by Guzzle.
     * @throws \GuzzleHttp\RequestException Throws the main exception generated
     *         by Guzzle.
     */
    protected function onFailure(RequestException $exception)
    {
        throw $exception;
    }

    /**
     * Helper method that performs the invokation of the request.
     * @param string $verb The HTTP verb to use.
     * @param string $url The URL to hit in the request.
     * @param array $options The options to pass to Guzzle for the request.
     * @return mixed Returns the result of $client->$verb. This could be a
     *         Response object for a syncronous request, or possibly a Promise
     *         for an asyncronous request.
     */
    private function doRequest($verb, $url, $options)
    {
        return $this->getClient()->$verb($url, $options);
    }

    /**
     * Helper method to ensure we always have a valid callable.
     * @param mixed $callback The callback to check.
     * @param string $fallback The fallback method to use.
     * @return callable If the $callback parameter is a valid callback, it will
     *         be returned directly. Otherwise, we will use [$this, $fallback],
     *         as the callable.
     */
    private function getCallback($callback, $fallback)
    {
        if (is_callable($callback)) {
            return $callback;
        }
        return [$this, $fallback];
    }
}
